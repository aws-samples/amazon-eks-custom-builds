AWSTemplateFormatVersion: '2010-09-09'
Description: 'EC2 Image Builder Pipeline to build a RHEL EKS worker node.'

Parameters:
  BinaryBucketName:
    Default: 'amazon-eks'
    Description: The S3 bucket where the EKS binaries are hosted
    Type: String
  RHELVersion:
    Type: String
    Default: '8'
    AllowedValues:
      - '8'
      - '9'
    Description: 'RHEL version to use (8 or 9)'
  BinaryBucketRegion:
    Default: 'us-west-2'
    Description: The AWS region where the EKS binary S3 bucket resides
    Type: String
  ContainerSELinuxVersion:
    Default: '*'
    Description: The version of container-se-linux to be installed
    Type: String
  ContainerdUrl:
    Default: 'https://api.github.com/repos/containerd/containerd/releases'
    Description: The URL for the containerd install
    Type: String
  ContainerdVersion:
    Default: '1.7.23'
    Description: The version of containerd to install
    Type: String
  EnableAccelerator:
    Default: 'none'
    Description: AWS Inferentia accelerator drivers to install
    Type: String
  EnableEfa:
    Default: 'false'
    Description: Whether or not to enable Elastic Fabric Adapter
    Type: String
  EnableFips:
    Default: 'false'
    Description: Whether or not to enable FIPS encryption
    Type: String
  EnableStig:
    Default: 'false'
    Description: Whether or not to enable STIG image component
    Type: String
  RootVolumeSize:
    Type: Number
    Default: 50
    Description: Size in GB for the root volume
  EnableStigPartition:
    Default: 'false'
    Description: Whether or not to enable STIG partitioning
    Type: String
  AWSCliUrl:
    Default: 'https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip'
    Description: The location of the AWS ClI zip.
    Type: String
  GithubDir:
    Default: 'amazon-eks-ami-rhel'
    Description: The local relative directory name of the Github Repository
    Type: String
  GithubRepoUrl:
    Default: 'https://github.com/aws-samples/amazon-eks-ami-rhel.git'
    Description: The Github Repository URL for downloading the install script and files
    Type: String
  GithubS3BucketName:
    Default: ''
    Description: The S3 bucket where the amazon-eks-ami-rhel tar file can be stored.
    Type: String
  HomePath:
    Default: '/home/ec2-user'
    Description: The home directory of the user executing the install script
    Type: String
  TerminateInstanceOnFailure:
    Default: true
    Description: Specify whether to terminate the instance on failure
    Type: String
  SecurityGroupId:
    Default: ''
    Description: ID of the Security Group to associate with the infrastructure configuration
    Type: String
  SubnetId:
    Default: ''
    Description: ID of the Subnet to use for the infrastructure configuration
    Type: String
  KubernetesVersion:
    AllowedValues:
      - '1.21'
      - '1.22'
      - '1.23'
      - '1.24'
      - '1.25'
      - '1.26'
      - '1.27'
      - '1.28'
      - '1.29'
      - '1.30'
      - '1.31'
    Default: '1.31'
    Description: The Kubernetes version of the worker nodes
    Type: String
  NerdctlUrl:
    Default: 'https://api.github.com/repos/containerd/nerdctl/releases'
    Description: The URL for the nerdctl install
    Type: String
  NerdctlVersion:
    Default: '*'
    Description: The version of nerdctl to install
    Type: String
  NodeAdmBuildImage:
    Default: 'public.ecr.aws/eks-distro-build-tooling/golang:1.23'
    Description: The version of the nodeadmin build image to install
    Type: String
  PauseContainerImage:
    Default: '602401143452.dkr.ecr.us-west-2.amazonaws.com/eks/pause:3.5'
    Description: The pause container image to use
    Type: String
  RuncVersion:
    Default: '*'
    Description: The version of runc to install
    Type: String
  SSMAgentVersion:
    Default: 'latest'
    Description: The version of the SSM Agent to install
    Type: String
  TempPath:
    Default: '/tmp'
    Description: The local temp directory
    Type: String
  WorkerDir:
    Default: 'worker'
    Description: The working directory of the install script
    Type: String
  EnableAwsCliComponent:
    Default: 'true'
    Description: Whether or not to enable AWS CLI component installation
    Type: String
  S3UrlNvidiaRpms:
    Type: String
    Description: The S3 URL for NVIDIA RPMs (optional)
    Default: "none"
  RetainNvidiaRPM:
    Type: String
    Description: The S3 URL for NVIDIA RPMs (optional)
    Default: "false"
  AdditionalComponents:
    Type: String
    Default: ''
    Description: 'Comma-separated list of additional Image Builder component ARNs to include'
Mappings:
  RegionMap:
    af-south-1:
      AccountId: "877085696533"
    ap-east-1:
      AccountId: "800184023465"
    ap-northeast-1:
      AccountId: "602401143452"
    ap-northeast-2:
      AccountId: "602401143452"
    ap-northeast-3:
      AccountId: "602401143452"
    ap-south-1:
      AccountId: "602401143452"
    ap-south-2:
      AccountId: "900889452093"
    ap-southeast-1:
      AccountId: "602401143452"
    ap-southeast-2:
      AccountId: "602401143452"
    ap-southeast-3:
      AccountId: "296578399912"
    ap-southeast-4:
      AccountId: "491585149902"
    ca-central-1:
      AccountId: "602401143452"
    ca-west-1:
      AccountId: "761377655185"
    cn-north-1:
      AccountId: "918309763551"
    cn-northwest-1:
      AccountId: "961992271922"
    eu-central-1:
      AccountId: "602401143452"
    eu-central-2:
      AccountId: "900612956339"
    eu-north-1:
      AccountId: "602401143452"
    eu-south-1:
      AccountId: "590381155156"
    eu-south-2:
      AccountId: "455263428931"
    eu-west-1:
      AccountId: "602401143452"
    eu-west-2:
      AccountId: "602401143452"
    eu-west-3:
      AccountId: "602401143452"
    il-central-1:
      AccountId: "066635153087"
    me-south-1:
      AccountId: "558608220178"
    me-central-1:
      AccountId: "759879836304"
    sa-east-1:
      AccountId: "602401143452"
    us-east-1:
      AccountId: "602401143452"
    us-east-2:
      AccountId: "602401143452"
    us-gov-east-1:
      AccountId: "151742754352"
    us-gov-west-1:
      AccountId: "013241004608"
    us-west-1:
      AccountId: "602401143452"
    us-west-2:
      AccountId: "602401143452"
    us-iso-east-1:
      AccountId: "725322719131"
    us-isob-east-1:
      AccountId: "187977181151"
    us-iso-west-1:
      AccountId: "608367168043"
    us-isof-south-1:
      AccountId: "676585237158"
    us-isof-east-1:
      AccountId: "171035529773"
    eu-isoe-west-1:
      AccountId: "249663109785"
    

Conditions:
  IsChina: !Or 
    - !Equals [!Ref 'AWS::Region', 'cn-north-1']
    - !Equals [!Ref 'AWS::Region', 'cn-northwest-1']
  CheckStig:
    'Fn::Equals':
      - Ref: EnableStig
      - true
  UseCustomSubnetId: !Not [!Equals [!Ref SubnetId, '']]
  UseCustomSecurityGroupId: !Not [!Equals [!Ref SecurityGroupId, '']]
  HasGithubS3Bucket: !Not [!Equals [!Ref GithubS3BucketName, '']]
  HasNvidiaS3Url: !Not [!Equals [!Ref S3UrlNvidiaRpms, 'none']]
  EnableStigPartition: 
    'Fn::Equals':
      - Ref: EnableStigPartition
      - 'true'
  IsAwsCliComponentEnabled:
    'Fn::Equals':
      - Ref: EnableAwsCliComponent
      - 'true'
  HasAdditionalComponents: !Not [!Equals [!Ref AdditionalComponents, '']]
Resources:
  ImageBuilderRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/EC2InstanceProfileForImageBuilder'

  ImageBuilderSSMIAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ssm:ListInstanceAssociations
              - ssm:PutComplianceItems
              - ssm:PutConfigurePackageResult
              - ssm:PutInventory
              - ssm:UpdateInstanceAssociationStatus
              - ssm:UpdateInstanceInformation
              - ssmmessages:CreateControlChannel
              - ssmmessages:CreateDataChannel
              - ssmmessages:OpenControlChannel
              - ssmmessages:OpenDataChannel
            Resource: '*'
          - Effect: Allow
            Action:
              - ssm:DescribeDocument
              - ssm:GetDocument
              - ssm:GetManifest
            Resource: 
              - !Sub 'arn:${AWS::Partition}:ssm:*:*:document/AmazonInspector2-InspectorSsmPluginLinux'
              - !Sub 'arn:${AWS::Partition}:ssm:*:*:document/AWS-GatherSoftwareInventory'
      PolicyName: !Sub '${AWS::StackName}-SSMPolicy'
      Roles: 
        - !Ref ImageBuilderRole

  ImageBuilderS3IAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:Get*
              - s3:List*
            Resource:
              - !Sub 'arn:${AWS::Partition}:s3:::${BinaryBucketName}/*'
              - !Sub 'arn:${AWS::Partition}:s3:::${BinaryBucketName}'
              - 'Fn::If':
                - HasGithubS3Bucket
                - !Sub 'arn:${AWS::Partition}:s3:::${GithubS3BucketName}'
                - !Ref 'AWS::NoValue'
              - 'Fn::If':
                - HasGithubS3Bucket
                - !Sub 'arn:${AWS::Partition}:s3:::${GithubS3BucketName}/*'
                - !Ref 'AWS::NoValue'
      PolicyName: !Sub '${AWS::StackName}-S3Policy'
      Roles: 
        - !Ref ImageBuilderRole

  ImageBuilderECRIAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - ecr:BatchCheckLayerAvailability
            Resource:
              - !Sub 
                - 'arn:${AWS::Partition}:ecr:${AWS::Region}:${AccountId}:*'
                - AccountId: !FindInMap [RegionMap, !Ref 'AWS::Region', AccountId]
          - Effect: Allow
            Action:
              - ecr:GetAuthorizationToken
            Resource: '*'
      PolicyName: !Sub '${AWS::StackName}-ECRPolicy'
      Roles: 
        - !Ref ImageBuilderRole

  ImageBuilderInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref ImageBuilderRole

  ImageBuilderComponent:
    Type: 'AWS::ImageBuilder::Component'
    Properties:
      Name: !Sub '${AWS::StackName}-component'
      Description: !Sub 'RHEL EKS worker node installation component.'
      Platform: 'Linux'
      Version: !Sub '${KubernetesVersion}.0'
      ChangeDescription: 'change-description'
      SupportedOsVersions: 
          - 'Red Hat Enterprise Linux 8'
          - 'Red Hat Enterprise Linux 9'
      Data: !Sub |
        name: Amazon EKS Optimized RHEL AMI
        description: Installs Amazon EKS-optimized RHEL artifacts for Amazon EKS version ${KubernetesVersion}.
        schemaVersion: 1.0
        constants:
          - AWSRegion:
              type: string
              value: '${AWS::Region}'
          - KubernetesVersion:
              type: string
              value: '${KubernetesVersion}'
          - GithubRepoUrl:
              type: string
              value: '${GithubRepoUrl}'
          - GithubDir:
              type: string
              value: '${GithubDir}'
          - BinaryBucketName:
              type: string
              value: '${BinaryBucketName}'
          - BinaryBucketRegion:
              type: string
              value: '${BinaryBucketRegion}'
          - ContainerSELinuxVersion:
              type: string
              value: '${ContainerSELinuxVersion}'
          - ContainerdUrl:
              type: string
              value: '${ContainerdUrl}'
          - ContainerdVersion:
              type: string
              value: '${ContainerdVersion}'
          - NerdctlUrl:
              type: string
              value: '${NerdctlUrl}'
          - NerdctlVersion:
              type: string
              value: '${NerdctlVersion}'
          - NodeAdmBuildImage:
              type: string
              value: '${NodeAdmBuildImage}'
          - PauseContainerImage:
              type: String
              value: '${PauseContainerImage}'
          - RuncVersion:
              type: string
              value: '${RuncVersion}'
          - TempPath:
              type: string
              value: '${TempPath}'
          - WorkerDir:
              type: string
              value: '${WorkerDir}'
          - HomePath:
              type: string
              value: '${HomePath}'
          - EnableAccelerator:
              type: string
              value: '${EnableAccelerator}'
          - EnableEfa:
              type: string
              value: '${EnableEfa}'
          - EnableFips:
              type: string
              value: '${EnableFips}'
          - EnableStigPartition:
              type: string
              value: '${EnableStigPartition}'
          - AWSCliUrl:
              type: string
              value: '${AWSCliUrl}'
          - SSMAgentVersion:
              type: string
              value: '${SSMAgentVersion}'
          - EnableAwsCliComponent:
              type: string
              value: '${EnableAwsCliComponent}'
          - S3UrlNvidiaRpms:
              type: string
              value: '${S3UrlNvidiaRpms}'
          - RetainNvidiaRPM:
              type: string
              value: '${RetainNvidiaRPM}'
        phases:
          - name: build
            steps:
              - name: Setup
                action: ExecuteBash
                timeoutSeconds: 1200
                onFailure: Abort
                maxAttempts: 1
                inputs:
                  commands:
                    - cd {{ HomePath }}
                    - |
                      if [[ "{{ GithubRepoUrl }}" == s3://* ]]; then
                        # We need the awscli earlier so we can pull the repo from S3.
                        if [ "{{ EnableAwsCliComponent }}" = "false" ]; then

                          export AWS_DEFAULT_REGION="{{ AWSRegion }}"
                          export AWS_CA_BUNDLE="/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"
                          
                          dnf install unzip -y
                          curl "{{ AWSCliUrl }}" -o "awscliv2.zip"

                          unzip awscliv2.zip
                          sudo ./aws/install --bin-dir /usr/local/sbin --update
                        fi
                        aws s3 cp --region {{ AWSRegion }} {{ GithubRepoUrl }} .
                        tar -xzvf $(basename {{ GithubRepoUrl }})
                      else
                        yum install -y git
                        git clone {{ GithubRepoUrl }}
                      fi
                    - sudo mkdir -p {{ TempPath }}/{{ WorkerDir}}/rootfs
                    - sudo mkdir -p {{ TempPath }}/{{ WorkerDir}}/shared
                    - sudo mkdir -p {{ TempPath }}/{{ WorkerDir}}/log-collector-script
                    - sudo mkdir -p {{ TempPath }}/{{ WorkerDir}}/nodeadm
                    - sudo cp -r {{ HomePath }}/{{ GithubDir }}/templates/shared/runtime/* {{ TempPath }}/{{ WorkerDir}}/shared/
                    - sudo cp -r {{ HomePath }}/{{ GithubDir }}/templates/rhel/runtime/rootfs/* {{ TempPath }}/{{ WorkerDir}}/rootfs/
                    - sudo cp -r {{ HomePath }}/{{ GithubDir }}/log-collector-script/linux/* {{ TempPath }}/{{ WorkerDir}}/log-collector-script/
                    - sudo mkdir -p /etc/eks/log-collector-script/
                    - sudo cp -v {{ TempPath }}/{{ WorkerDir}}/log-collector-script/eks-log-collector.sh /etc/eks/log-collector-script/
                    - sudo cp -r {{ HomePath }}/{{ GithubDir }}/nodeadm/* {{ TempPath }}/{{ WorkerDir}}/nodeadm/
                    - sudo cp -rv {{ TempPath }}/{{ WorkerDir}}/rootfs/* /
                    - sudo chmod -R a+x {{ TempPath }}/{{ WorkerDir}}/shared/bin/
                    - sudo cp -rv {{ TempPath }}/{{ WorkerDir}}/shared/bin/* /usr/bin/
              - name: EnableFIPS
                action: ExecuteBash
                timeoutSeconds: 1200
                onFailure: Abort
                maxAttempts: 1
                inputs:
                  commands:
                    - if [ "{{ EnableFips }}" = "true" ]; then ENABLE_FIPS={{ EnableFips }} bash {{ HomePath }}/{{ GithubDir }}/templates/rhel/provisioners/enable-fips.sh; fi
              - name: EnableEFA
                action: ExecuteBash
                timeoutSeconds: 1200
                onFailure: Abort
                maxAttempts: 1
                inputs:
                  commands:
                    - if [ "{{ EnableEfa }}" = "true" ]; then ENABLE_EFA={{ EnableEfa }} bash {{ HomePath }}/{{ GithubDir }}/templates/rhel/provisioners/limit-c-states.sh; fi
              - name: InstallWorker
                action: ExecuteBash
                timeoutSeconds: 1200
                onFailure: Abort
                maxAttempts: 1
                inputs:
                  commands:
                    - KUBERNETES_VERSION_AND_BUILD_DATE=$({{ HomePath }}/{{ GithubDir }}/hack/latest-binaries.sh {{ KubernetesVersion }} {{AWSRegion}} {{ BinaryBucketRegion }} {{ BinaryBucketName }})
                    - KUBERNETES_VERSION=$(echo $KUBERNETES_VERSION_AND_BUILD_DATE | grep -oP 'kubernetes_version=\K[^\s]+')
                    - KUBERNETES_BUILD_DATE=$(echo $KUBERNETES_VERSION_AND_BUILD_DATE | grep -oP 'kubernetes_build_date=\K[^\s]+')
                    - KUBERNETES_VERSION=$KUBERNETES_VERSION KUBERNETES_BUILD_DATE=$KUBERNETES_BUILD_DATE AWS_REGION={{ AWSRegion }} BINARY_BUCKET_NAME={{ BinaryBucketName }} BINARY_BUCKET_REGION={{ BinaryBucketRegion }} CONTAINER_SELINUX_VERSION={{ ContainerSELinuxVersion }} CONTAINERD_URL={{ ContainerdUrl }} CONTAINERD_VERSION={{ ContainerdVersion }} NERDCTL_URL={{ NerdctlUrl }} NERDCTL_VERSION={{ NerdctlVersion }} RUNC_VERSION={{ RuncVersion }} SSM_AGENT_VERSION={{ SSMAgentVersion }} WORKING_DIR={{ TempPath }}/{{ WorkerDir}} bash {{ HomePath }}/{{ GithubDir }}/templates/rhel/provisioners/install-worker.sh
              - name: InstallNodeAdm
                action: ExecuteBash
                timeoutSeconds: 1200
                onFailure: Abort
                maxAttempts: 1
                inputs:
                  commands:
                    - BUILD_IMAGE={{ NodeAdmBuildImage }} AWS_REGION={{ AWSRegion }} PROJECT_DIR={{ TempPath }}/{{ WorkerDir}}/nodeadm bash {{ HomePath }}/{{ GithubDir }}/templates/rhel/provisioners/install-nodeadm.sh
              - name: CachePauseContainer
                action: ExecuteBash
                timeoutSeconds: 1200
                onFailure: Abort
                maxAttempts: 1
                inputs:
                  commands:
                    - PAUSE_CONTAINER_IMAGE={{ PauseContainerImage }} AWS_REGION={{ AWSRegion }} bash {{ HomePath }}/{{ GithubDir }}/templates/rhel/provisioners/cache-pause-container.sh
              - name: InstallEFA
                action: ExecuteBash
                timeoutSeconds: 1200
                onFailure: Abort
                maxAttempts: 1
                inputs:
                  commands:
                    - if [ "{{ EnableEfa }}" = "true" ]; then AWS_REGION={{ AWSRegion }} ENABLE_EFA={{ EnableEfa }} bash {{ HomePath }}/{{ GithubDir }}/templates/rhel/provisioners/install-efa.sh; fi
              - name: EnableStigPartition
                action: ExecuteBash
                timeoutSeconds: 1200
                onFailure: Abort
                maxAttempts: 1
                inputs:
                  commands:
                    - |
                      if [ "{{ EnableStigPartition }}" = "true" ]; then
                        echo "Starting STIG Partition step:"
                        dnf install rsync -y
                        dnf install lvm2 -y
                        dnf install nvme-cli -y

                        # Get total disk size in sectors
                        total_sectors=$(blockdev --getsz /dev/nvme0n1)
                        echo "Total sectors: ${!total_sectors}"

                        # Calculate 33% of disk size for root partition (in sectors)
                        root_size=$((total_sectors * 33 / 100))
                        echo "Root size in sectors: ${!root_size}"

                        # Convert to GB for fdisk (assuming 512-byte sectors)
                        root_size_gb=$((root_size * 512 / 1024 / 1024 / 1024))
                        echo "Root size in GB: ${!root_size_gb}"

                        # Recreate partitions using GB size
                        echo -e "d\\n3\\nn\\n3\\n\\n+${!root_size_gb}G\\nw\\ny" | fdisk /dev/nvme0n1

                        partprobe /dev/nvme0n1
                        xfs_growfs /
                        echo -e "n\\n4\\n\\n\\nw\\ny" | fdisk /dev/nvme0n1
                        partprobe /dev/nvme0n1p4
                        
                        # Create mount point directories
                        mkdir -p /mnt/var
                        mkdir -p /mnt/varlog
                        mkdir -p /mnt/varlogaudit
                        mkdir -p /mnt/tmp
                        mkdir -p /mnt/vartmp
                        mkdir -p /mnt/home         
                        
                        # Set up LVM on the new partition
                        pvcreate /dev/nvme0n1p4
                        vgcreate vg_data /dev/nvme0n1p4

                        echo "Creating Logical Volumes"
                        lvcreate -l 39%VG -n lv_var vg_data
                        lvcreate -l 8%VG -n lv_varlog vg_data
                        lvcreate -l 8%VG -n lv_varlogaudit vg_data
                        lvcreate -l 8%VG -n lv_tmp vg_data
                        lvcreate -l 8%VG -n lv_vartmp vg_data
                        lvcreate -l 8%VG -n lv_home vg_data
                        echo "Creating Swap LV"
                        lvcreate -l 100%FREE -n lv_swap vg_data
                        
                        echo "Creating File Systems"
                        mkfs.xfs /dev/vg_data/lv_var
                        mkfs.xfs /dev/vg_data/lv_varlog
                        mkfs.xfs /dev/vg_data/lv_varlogaudit
                        mkfs.xfs /dev/vg_data/lv_tmp
                        mkfs.xfs /dev/vg_data/lv_vartmp
                        mkfs.xfs /dev/vg_data/lv_home

                        echo "Setting Swap"
                        mkswap /dev/vg_data/lv_swap

                        echo "LV Status after swap creation:"
                        lvs
                        
                        echo "Mount temporarily and copy data"
                        mount /dev/vg_data/lv_var /mnt/var
                        mount /dev/vg_data/lv_varlog /mnt/varlog
                        mount /dev/vg_data/lv_varlogaudit /mnt/varlogaudit
                        mount /dev/vg_data/lv_tmp /mnt/tmp
                        mount /dev/vg_data/lv_vartmp /mnt/vartmp
                        mount /dev/vg_data/lv_home /mnt/home
                        
                        # Copy data
                        rsync -aqxPAX /var/* /mnt/var/
                        rsync -aqxPAX /var/log/* /mnt/varlog/
                        rsync -aqxPAX /var/log/audit/* /mnt/varlogaudit/
                        rsync -aqxPAX /tmp/* /mnt/tmp/
                        rsync -aqxPAX /var/tmp/* /mnt/vartmp/
                        rsync -aqxPAX /home/* /mnt/home/
                        
                        # Unmount temporary locations
                        umount /mnt/var
                        umount /mnt/varlog
                        umount /mnt/varlogaudit
                        umount /mnt/tmp
                        umount /mnt/vartmp
                        umount /mnt/home
                        
                        # Create target directories if they don't exist
                        mkdir -p /var
                        mkdir -p /var/log
                        mkdir -p /var/log/audit
                        mkdir -p /tmp
                        mkdir -p /var/tmp
                        mkdir -p /home
                        
                        # Add to fstab using LVM paths
                        echo "/dev/mapper/vg_data-lv_var /var xfs defaults,nofail 0 2" >> /etc/fstab
                        echo "/dev/mapper/vg_data-lv_varlog /var/log xfs defaults,nofail 0 2" >> /etc/fstab
                        echo "/dev/mapper/vg_data-lv_varlogaudit /var/log/audit xfs defaults,nofail 0 0" >> /etc/fstab
                        echo "/dev/mapper/vg_data-lv_tmp /tmp xfs defaults,nofail,noexec 0 0" >> /etc/fstab
                        echo "/dev/mapper/vg_data-lv_vartmp /var/tmp xfs defaults,nofail,noexec 0 0" >> /etc/fstab
                        echo "/dev/mapper/vg_data-lv_home /home xfs defaults,nofail 0 2" >> /etc/fstab
                        
                        # Mount all
                        mount -a
                        echo "STIG partitioning complete."
                      fi
              - name: InstallNvidiaDriver
                action: ExecuteBash
                timeoutSeconds: 1200
                onFailure: Abort
                maxAttempts: 1
                inputs:
                  commands:
                    - S3URL="{{ S3UrlNvidiaRpms }}"
                    - if [ "$S3URL" = "none" ]; then S3URL=""; fi
                    - AWS_REGION={{ AWSRegion }} ENABLE_ACCELERATOR={{ EnableAccelerator }} S3_URL_NVIDIA_RPMS=$S3URL RETAIN_NVIDIA_RPM={{ RetainNvidiaRPM }} WORKING_DIR={{ TempPath }}/{{ WorkerDir}} bash {{ HomePath }}/{{ GithubDir }}/templates/rhel/provisioners/install-nvidia-driver.sh
  CleanupComponent:
    Type: 'AWS::ImageBuilder::Component'
    Properties:
      Name: !Sub '${AWS::StackName}-cleanup'
      Description: 'Cleanup component for RHEL EKS worker node'
      Platform: 'Linux'
      Version: '1.0.0'
      Data: !Sub |
        name: Cleanup
        description: Performs cleanup operations
        schemaVersion: 1.0
        constants:
          - HomePath:
              type: string
              value: '${HomePath}'
          - GithubDir:
              type: string
              value: '${GithubDir}'
          - TempPath:
              type: string
              value: '${TempPath}'
          - WorkerDir:
              type: string
              value: '${WorkerDir}'
        phases:
          - name: build
            steps:
              - name: Cleanup
                action: ExecuteBash
                timeoutSeconds: 1200
                onFailure: Continue
                maxAttempts: 1
                inputs:
                  commands:
                    - echo "Starting cleanup process..."
                    - bash {{ HomePath }}/{{ GithubDir }}/templates/shared/provisioners/cleanup.sh
                    - bash {{ HomePath }}/{{ GithubDir }}/templates/rhel/provisioners/validate.sh
                    - sudo rm -rf {{ HomePath }}/*
                    - sudo rm -rf {{ TempPath }}/provisioners
                    - sudo rm -rf {{ TempPath }}/hack
                    - sudo rm -rf {{ TempPath }}/{{ WorkerDir}}
                    - echo "Cleanup complete"

  ImageBuilderImageRecipe:
    Type: 'AWS::ImageBuilder::ImageRecipe'
    Properties:
      Name: !Sub '${AWS::StackName}-recipe'
      Description: 'RHEL EKS worker node recipe'
      Version: !Sub '${KubernetesVersion}.0'
      Components:
        - 'Fn::If':
          - IsAwsCliComponentEnabled
          - ComponentArn: !Sub 'arn:${AWS::Partition}:imagebuilder:${AWS::Region}:aws:component/aws-cli-version-2-linux/x.x.x'
          - !Ref 'AWS::NoValue'
        - 'Fn::If':
          - CheckStig
          - ComponentArn: !Sub 'arn:${AWS::Partition}:imagebuilder:${AWS::Region}:aws:component//stig-build-linux/x.x.x'
          - !Ref 'AWS::NoValue'
        - ComponentArn: !Ref ImageBuilderComponent
        - !If
            - HasAdditionalComponents
            - { ComponentArn: !Ref AdditionalComponents }
            - !Ref 'AWS::NoValue'
        - ComponentArn: !Ref CleanupComponent
      WorkingDirectory: !If
        - EnableStigPartition
        - '/opt'
        - !Ref 'AWS::NoValue'

      ParentImage: !Sub 'arn:${AWS::Partition}:imagebuilder:${AWS::Region}:aws:image/red-hat-enterprise-linux-${RHELVersion}-x86/x.x.x'
      AdditionalInstanceConfiguration: !If
        - EnableStigPartition
        - UserDataOverride:
            Fn::Base64:
              Fn::Sub: |
                #cloud-config
                growpart:
                  mode: off
                resize_rootfs: false
                runcmd:
                  - sudo yum install -y https://s3.${AWS::Region}.${AWS::URLSuffix}/amazon-ssm-${AWS::Region}/latest/linux_amd64/amazon-ssm-agent.rpm
          SystemsManagerAgent:
            UninstallAfterBuild: false
        - SystemsManagerAgent:
            UninstallAfterBuild: false
      BlockDeviceMappings: 
        - DeviceName: '/dev/sda1'
          Ebs: 
            DeleteOnTermination: true
            Encrypted: false
            VolumeSize: !Sub '${RootVolumeSize}'
            VolumeType: 'gp3'

  ImageBuilderDistributionConfiguration:
    Type: 'AWS::ImageBuilder::DistributionConfiguration'
    Properties:
      Name: !Sub '${AWS::StackName}-distro'
      Distributions: 
        - 
          Region: !Ref AWS::Region
          AmiDistributionConfiguration: {}

  ImageBuilderInfrastructureConfiguration:
    Type: 'AWS::ImageBuilder::InfrastructureConfiguration'
    Properties:
      Name: !Sub '${AWS::StackName}-infra-config'
      InstanceProfileName: !Ref ImageBuilderInstanceProfile
      Logging: 
        S3Logs: {}
      TerminateInstanceOnFailure: !Ref TerminateInstanceOnFailure
      SubnetId: !If [ UseCustomSubnetId, !Ref SubnetId , !Ref 'AWS::NoValue' ]
      SecurityGroupIds:
        - !If [ UseCustomSecurityGroupId, !Ref SecurityGroupId , !Ref 'AWS::NoValue' ]

  ImageBuilderImagePipeline:
    Type: 'AWS::ImageBuilder::ImagePipeline'
    Properties:
      Name: !Sub '${AWS::StackName}-pipeline'
      Description: 'RHEL EKS worker node pipeline.'
      ImageRecipeArn: !Ref ImageBuilderImageRecipe
      InfrastructureConfigurationArn: !Ref ImageBuilderInfrastructureConfiguration
      DistributionConfigurationArn: !Ref ImageBuilderDistributionConfiguration
      EnhancedImageMetadataEnabled: false
      ImageTestsConfiguration: 
        ImageTestsEnabled: true
        TimeoutMinutes: 720
      Schedule: 
        ScheduleExpression: 'cron(0 9 ? * mon)'
        PipelineExecutionStartCondition: 'EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE'
      Status: 'ENABLED'

Outputs:
  ImageBuilderPipelineArn:
    Description: ARN of the ImageBuilder Pipeline created
    Value:
      Ref: ImageBuilderImagePipeline
  ImageBuilderRecipeArn:
    Description: ARN of the ImageBuilder Recipe created
    Value:
      Ref: ImageBuilderImageRecipe
  ImageBuilderComponentArn:
    Description: ARN of the ImageBuilder Component created
    Value:
      Ref: ImageBuilderComponent