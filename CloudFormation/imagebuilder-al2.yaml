AWSTemplateFormatVersion: '2010-09-09'
Description: 'EC2 Image Builder Pipeline to build an Amazon Linux 2 EKS worker node.'

Parameters:
  AdditionalRepos:
    Default: 'none'
    Description: Additional repos needed for worker node creation
    Type: String
  BinaryBucketName:
    Default: 'amazon-eks'
    Description: The S3 bucket where the EKS binaries are hosted
    Type: String
  BinaryBucketRegion:
    Default: 'us-west-2'
    Description: The AWS region where the EKS binary S3 bucket resides
    Type: String
  CNIPluginVersion:
    Default: 'v1.2.0'
    Description: The version of the AWS VPC CNI plugin to install
    Type: String
  CacheContainerImages:
    Default: 'false'
    Description: Whether or not to cache container images
    Type: String
  ContainerdVersion:
    Default: '1.7.*'
    Description: The version of containerd to install
    Type: String
  DockerVersion:
    Default: 'none'
    Description: The version of Docker to install
    Type: String
  EnableFips:
    Default: 'false'
    Description: Whether or not to enable FIPS encryption
    Type: String
  GithubDir:
    Default: 'amazon-eks-ami'
    Description: The local relative directory name of the Github Repository
    Type: String
  GithubRepoUrl:
    Default: 'https://github.com/awslabs/amazon-eks-ami.git'
    Description: The Github Repository URL for downloading the install script and files
    Type: String
  HomePath:
    Default: '/home/ec2-user'
    Description: The home directory of the user executing the install script
    Type: String
  KernelVersion:
    Default: 'none'
    Description: Kernel Version
    Type: String
  KubernetesVersion:
    AllowedValues:
      - '1.21'
      - '1.22'
      - '1.23'
      - '1.24'
      - '1.25'
      - '1.26'
      - '1.27'
      - '1.28'
      - '1.29'
      - '1.30'
    Default: '1.28'
    Description: The Kubernetes version of the worker nodes
    Type: String
  PauseContainerVersion:
    Default: '3.5'
    Description: Pause Container Version
    Type: String
  PullCNIFromGithub:
    Default: 'true'
    Description: Whether or not to download CNI from GitHub
    Type: String
  RuncVersion:
    Default: '1.1.*'
    Description: The version of runc to install
    Type: String
  SSMAgentVersion:
    Default: 'latest'
    Description: The version of the SSM Agent to install
    Type: String
  TempPath:
    Default: '/tmp'
    Description: The local temp directory
    Type: String
  WorkerDir:
    Default: 'worker'
    Description: The working directory of the install script
    Type: String

Resources:

  ImageBuilderRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/EC2InstanceProfileForImageBuilder'

  ImageBuilderSSMIAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ssm:ListInstanceAssociations
              - ssm:PutComplianceItems
              - ssm:PutConfigurePackageResult
              - ssm:PutInventory
              - ssm:UpdateInstanceAssociationStatus
              - ssm:UpdateInstanceInformation
              - ssmmessages:CreateControlChannel
              - ssmmessages:CreateDataChannel
              - ssmmessages:OpenControlChannel
              - ssmmessages:OpenDataChannel
            Resource: '*'
          - Effect: Allow
            Action:
              - ssm:DescribeDocument
              - ssm:GetDocument
              - ssm:GetManifest
            Resource: 
              - !Sub 'arn:${AWS::Partition}:ssm:*:*:document/AmazonInspector2-InspectorSsmPluginLinux'
              - !Sub 'arn:${AWS::Partition}:ssm:*:*:document/AWS-GatherSoftwareInventory'
      PolicyName: !Sub '${AWS::StackName}-SSMPolicy'
      Roles: 
        - !Ref ImageBuilderRole

  ImageBuilderS3IAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:Get*
              - s3:List*
            Resource:
              - !Sub 'arn:${AWS::Partition}:s3:::${BinaryBucketName}/*'
              - !Sub 'arn:${AWS::Partition}:s3:::${BinaryBucketName}'
      PolicyName: !Sub '${AWS::StackName}-S3Policy'
      Roles: 
        - !Ref ImageBuilderRole

  ImageBuilderInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref ImageBuilderRole

  ImageBuilderComponent:
    Type: 'AWS::ImageBuilder::Component'
    Properties:
      Name: !Sub '${AWS::StackName}-component'
      Description: !Sub 'Amazon Linux 2 EKS worker node installation component.'
      Platform: 'Linux'
      Version: !Sub '${KubernetesVersion}'
      ChangeDescription: 'change-description'
      SupportedOsVersions: 
        - 'Amazon Linux 2'
      Data: !Sub |
        name: Amazon EKS Optimized AL2 AMI
        description: Installs Amazon EKS-optimized AL2 artifacts for Amazon EKS version ${KubernetesVersion}.
        schemaVersion: 1.0
        constants:
          - KubernetesVersion:
              type: string
              value: '${KubernetesVersion}'
          - GithubRepoUrl:
              type: string
              value: '${GithubRepoUrl}'
          - GithubDir:
              type: string
              value: '${GithubDir}'
          - AdditionalRepos:
              type: string
              value: '${AdditionalRepos}'
          - BinaryBucketName:
              type: string
              value: '${BinaryBucketName}'
          - BinaryBucketRegion:
              type: string
              value: '${BinaryBucketRegion}'
          - DockerVersion:
              type: string
              value: '${DockerVersion}'
          - ContainerdVersion:
              type: string
              value: '${ContainerdVersion}'
          - RuncVersion:
              type: string
              value: '${RuncVersion}'
          - CNIPluginVersion:
              type: string
              value: '${CNIPluginVersion}'
          - PullCNIFromGithub:
              type: string
              value: '${PullCNIFromGithub}'
          - KernelVersion:
              type: string
              value: '${KernelVersion}'
          - TempPath:
              type: string
              value: '${TempPath}'
          - WorkerDir:
              type: string
              value: '${WorkerDir}'
          - HomePath:
              type: string
              value: '${HomePath}'
          - EnableFips:
              type: string
              value: '${EnableFips}'
          - PauseContainerVersion:
              type: string
              value: '${PauseContainerVersion}'
          - CacheContainerImages:
              type: string
              value: '${CacheContainerImages}'
          - SSMAgentVersion:
              type: string
              value: '${SSMAgentVersion}'
        phases:
          - name: build
            steps:
              - name: Setup
                action: ExecuteBash
                timeoutSeconds: 1200
                onFailure: Abort
                maxAttempts: 1
                inputs:
                  commands:
                    - yum install -y git
                    - cd {{ HomePath }}
                    - git clone {{ GithubRepoUrl }}
                    - sudo mkdir -p {{ TempPath }}/{{ WorkerDir}}
                    - sudo mkdir -p {{ TempPath }}/{{ WorkerDir}}/log-collector-script
                    - sudo cp -r {{ HomePath }}/{{ GithubDir }}/templates/shared/runtime/* {{ TempPath }}/{{ WorkerDir}}/
                    - sudo cp -r {{ HomePath }}/{{ GithubDir }}/templates/al2/runtime/* {{ TempPath }}/{{ WorkerDir}}/
                    - sudo cp -r {{ HomePath }}/{{ GithubDir }}/log-collector-script/linux/* {{ TempPath }}/{{ WorkerDir}}/log-collector-script/
                    - sudo chmod -R a+x {{ TempPath }}/{{ WorkerDir}}/bin/
                    - sudo mv {{ TempPath }}/{{ WorkerDir}}/bin/* /usr/bin/
              - name: InstallAdditionalRepos
                action: ExecuteBash
                timeoutSeconds: 1200
                onFailure: Abort
                maxAttempts: 1
                inputs:
                  commands:
                    - if [ "{{ AdditionalRepos }}" != "none" ]; then ADDITIONAL_YUM_REPOS='{{ AdditionalRepos }}' bash {{ HomePath }}/{{ GithubDir }}/templates/al2/provisioners/install-additional-repos.sh; fi
              - name: EnableFIPS
                action: ExecuteBash
                timeoutSeconds: 1200
                onFailure: Abort
                maxAttempts: 1
                inputs:
                  commands:
                    - if [ "{{ EnableFips }}" = "true" ]; then ENABLE_FIPS={{ EnableFips }} bash {{ HomePath }}/{{ GithubDir }}/templates/al2/provisioners/enable-fips.sh; fi
              - name: InstallWorker
                action: ExecuteBash
                timeoutSeconds: 1200
                onFailure: Abort
                maxAttempts: 1
                inputs:
                  commands:
                    - KUBERNETES_VERSION_AND_BUILD_DATE=$({{ HomePath }}/{{ GithubDir }}/hack/latest-binaries.sh {{ KubernetesVersion }})
                    - KUBERNETES_VERSION=$(echo $KUBERNETES_VERSION_AND_BUILD_DATE | grep -oP 'kubernetes_version=\K[^\s]+')
                    - KUBERNETES_BUILD_DATE=$(echo $KUBERNETES_VERSION_AND_BUILD_DATE | grep -oP 'kubernetes_build_date=\K[^\s]+')
                    - if [ "{{ KernelVersion }}" != "none" ]; then KUBERNETES_VERSION=$KUBERNETES_VERSION KERNEL_VERSION={{ KernelVersion }} bash {{ HomePath }}/{{ GithubDir }}/templates/al2/provisioners/upgrade-kernel.sh; fi
                    - KUBERNETES_VERSION=$KUBERNETES_VERSION KUBERNETES_BUILD_DATE=$KUBERNETES_BUILD_DATE BINARY_BUCKET_NAME={{ BinaryBucketName }} BINARY_BUCKET_REGION={{ BinaryBucketRegion }} CONTAINERD_VERSION={{ ContainerdVersion }} RUNC_VERSION={{ RuncVersion }} DOCKER_VERSION={{ DockerVersion }} CNI_PLUGIN_VERSION={{ CNIPluginVersion }} PULL_CNI_FROM_GITHUB={{ PullCNIFromGithub }} PAUSE_CONTAINER_VERSION={{ PauseContainerVersion }} CACHE_CONTAINER_IMAGES={{ CacheContainerImages }} SSM_AGENT_VERSION={{ SSMAgentVersion }} WORKING_DIR={{ TempPath }}/{{ WorkerDir}} AWS_ACCESS_KEY_ID= bash {{ HomePath }}/{{ GithubDir }}/templates/al2/provisioners/install-worker.sh
              - name: Cleanup
                action: ExecuteBash
                timeoutSeconds: 1200
                onFailure: Abort
                maxAttempts: 1
                inputs:
                  commands:
                    - if [ "{{ AdditionalRepos }}" != "none" ]; then ADDITIONAL_YUM_REPOS='{{ AdditionalRepos }}' bash {{ HomePath }}/{{ GithubDir }}/templates/al2/provisioners/cleanup-additional-repos.sh; fi
                    - bash {{ HomePath }}/{{ GithubDir }}/templates/shared/provisioners/cleanup.sh
                    - KERNEL_VERSION=$(echo $KERNEL_VERSION | sed 's/version-//')
                    - KERNEL_VERSION=$KERNEL_VERSION bash {{ HomePath }}/{{ GithubDir }}/templates/al2/provisioners/validate.sh
                    - sudo rm -rf {{ HomePath }}/*
                    - sudo rm -rf {{ TempPath }}/provisioners
                    - sudo rm -rf {{ TempPath }}/hack
                    - sudo rm -rf {{ TempPath }}/{{ WorkerDir}}

  ImageBuilderImageRecipe:
    Type: 'AWS::ImageBuilder::ImageRecipe'
    Properties:
      Name: !Sub '${AWS::StackName}-recipe'
      Description: 'Amazon Linux 2 EKS worker node recipe'
      Version: !Sub '${KubernetesVersion}.0'
      Components:
        - ComponentArn: !Sub 'arn:${AWS::Partition}:imagebuilder:${AWS::Region}:aws:component/aws-cli-version-2-linux/x.x.x'
        - ComponentArn: !Ref ImageBuilderComponent
      ParentImage: !Sub 'arn:${AWS::Partition}:imagebuilder:${AWS::Region}:aws:image/amazon-linux-2-x86/x.x.x'
      BlockDeviceMappings: 
        - DeviceName: '/dev/sda1'
          Ebs: 
            DeleteOnTermination: true
            Encrypted: false
            VolumeSize: 50
            VolumeType: 'gp2'
      AdditionalInstanceConfiguration:
        SystemsManagerAgent:
          UninstallAfterBuild: false

  ImageBuilderDistributionConfiguration:
    Type: 'AWS::ImageBuilder::DistributionConfiguration'
    Properties:
      Name: !Sub '${AWS::StackName}-distro'
      Distributions: 
        - 
          Region: !Ref AWS::Region
          AmiDistributionConfiguration: {}

  ImageBuilderInfrastructureConfiguration:
    Type: 'AWS::ImageBuilder::InfrastructureConfiguration'
    Properties:
      Name: !Sub '${AWS::StackName}-infra-config'
      InstanceProfileName: !Ref ImageBuilderInstanceProfile
      Logging: 
        S3Logs: {}
      TerminateInstanceOnFailure: true

  ImageBuilderImagePipeline:
    Type: 'AWS::ImageBuilder::ImagePipeline'
    Properties:
      Name: !Sub '${AWS::StackName}-pipeline'
      Description: 'Amazon Linux 2 EKS worker node pipeline.'
      ImageRecipeArn: !Ref ImageBuilderImageRecipe
      InfrastructureConfigurationArn: !Ref ImageBuilderInfrastructureConfiguration
      DistributionConfigurationArn: !Ref ImageBuilderDistributionConfiguration
      EnhancedImageMetadataEnabled: false
      ImageTestsConfiguration: 
        ImageTestsEnabled: true
        TimeoutMinutes: 720
      Schedule: 
        ScheduleExpression: 'cron(0 9 ? * mon)'
        PipelineExecutionStartCondition: 'EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE'
      Status: 'ENABLED'

Outputs:
  ImageBuilderPipelineArn:
    Description: ARN of the ImageBuilder Pipeline created
    Value:
      Ref: ImageBuilderImagePipeline
  ImageBuilderRecipeArn:
    Description: ARN of the ImageBuilder Recipe created
    Value:
      Ref: ImageBuilderImageRecipe
  ImageBuilderComponentArn:
    Description: ARN of the ImageBuilder Component created
    Value:
      Ref: ImageBuilderComponent