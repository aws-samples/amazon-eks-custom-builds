name: Amazon EKS Optimized AL2 AMI
description: Installs Amazon EKS-optimized AL2 artifacts for Amazon EKS.
schemaVersion: 1.0
constants:
  - AWSRegion:
      type: string
      value: 'us-west-2'
  - KubernetesVersion:
      type: string
      value: '1.30'
  - GithubRepoUrl:
      type: string
      value: 'https://github.com/awslabs/amazon-eks-ami.git'
  - GithubDir:
      type: string
      value: 'amazon-eks-ami'
  - AdditionalRepos:
      type: string
      value: 'none'
  - BinaryBucketName:
      type: string
      value: 'amazon-eks'
  - BinaryBucketRegion:
      type: string
      value: 'us-west-2'
  - DockerVersion:
      type: string
      value: 'none'
  - ContainerdVersion:
      type: string
      value: '1.7.*'
  - RuncVersion:
      type: string
      value: '1.1.*'
  - CNIPluginVersion:
      type: string
      value: 'v1.2.0'
  - PullCNIFromGithub:
      type: string
      value: 'true'
  - KernelVersion:
      type: string
      value: 'none'
  - TempPath:
      type: string
      value: '/tmp'
  - WorkerDir:
      type: string
      value: 'worker'
  - HomePath:
      type: string
      value: '/home/ec2-user'
  - EnableFips:
      type: string
      value: 'false'
  - PauseContainerVersion:
      type: string
      value: '3.5'
  - CacheContainerImages:
      type: string
      value: 'false'
  - SSMAgentVersion:
      type: string
      value: 'latest'
phases:
  - name: build
    steps:
      - name: Setup
        action: ExecuteBash
        timeoutSeconds: 1200
        onFailure: Abort
        maxAttempts: 1
        inputs:
          commands:
            - yum install -y git
            - cd {{ HomePath }}
            - git clone {{ GithubRepoUrl }}
            - sudo mkdir -p {{ TempPath }}/{{ WorkerDir}}
            - sudo mkdir -p {{ TempPath }}/{{ WorkerDir}}/log-collector-script
            - sudo cp -r {{ HomePath }}/{{ GithubDir }}/templates/shared/runtime/* {{ TempPath }}/{{ WorkerDir}}/
            - sudo cp -r {{ HomePath }}/{{ GithubDir }}/templates/al2/runtime/* {{ TempPath }}/{{ WorkerDir}}/
            - sudo cp -r {{ HomePath }}/{{ GithubDir }}/log-collector-script/linux/* {{ TempPath }}/{{ WorkerDir}}/log-collector-script/
            - sudo chmod -R a+x {{ TempPath }}/{{ WorkerDir}}/bin/
            - sudo mv {{ TempPath }}/{{ WorkerDir}}/bin/* /usr/bin/
      - name: InstallAdditionalRepos
        action: ExecuteBash
        timeoutSeconds: 1200
        onFailure: Abort
        maxAttempts: 1
        inputs:
          commands:
            - if [ "{{ AdditionalRepos }}" != "none" ]; then ADDITIONAL_YUM_REPOS='{{ AdditionalRepos }}' bash {{ HomePath }}/{{ GithubDir }}/templates/al2/provisioners/install-additional-repos.sh; fi
      - name: EnableFIPS
        action: ExecuteBash
        timeoutSeconds: 1200
        onFailure: Abort
        maxAttempts: 1
        inputs:
          commands:
            - if [ "{{ EnableFips }}" = "true" ]; then ENABLE_FIPS={{ EnableFips }} bash {{ HomePath }}/{{ GithubDir }}/templates/al2/provisioners/enable-fips.sh; fi
      - name: InstallWorker
        action: ExecuteBash
        timeoutSeconds: 1200
        onFailure: Abort
        maxAttempts: 1
        inputs:
          commands:
            - KUBERNETES_VERSION_AND_BUILD_DATE=$({{ HomePath }}/{{ GithubDir }}/hack/latest-binaries.sh {{ KubernetesVersion }} {{AWSRegion}} {{ BinaryBucketRegion }} {{ BinaryBucketName }})
            - KUBERNETES_VERSION=$(echo $KUBERNETES_VERSION_AND_BUILD_DATE | grep -oP 'kubernetes_version=\K[^\s]+')
            - KUBERNETES_BUILD_DATE=$(echo $KUBERNETES_VERSION_AND_BUILD_DATE | grep -oP 'kubernetes_build_date=\K[^\s]+')
            - if [ "{{ KernelVersion }}" != "none" ]; then KUBERNETES_VERSION=$KUBERNETES_VERSION KERNEL_VERSION={{ KernelVersion }} bash {{ HomePath }}/{{ GithubDir }}/templates/al2/provisioners/upgrade-kernel.sh; fi
            - KUBERNETES_VERSION=$KUBERNETES_VERSION KUBERNETES_BUILD_DATE=$KUBERNETES_BUILD_DATE AWS_REGION={{ AWSRegion }} BINARY_BUCKET_NAME={{ BinaryBucketName }} BINARY_BUCKET_REGION={{ BinaryBucketRegion }} CONTAINERD_VERSION={{ ContainerdVersion }} RUNC_VERSION={{ RuncVersion }} DOCKER_VERSION={{ DockerVersion }} CNI_PLUGIN_VERSION={{ CNIPluginVersion }} PULL_CNI_FROM_GITHUB={{ PullCNIFromGithub }} PAUSE_CONTAINER_VERSION={{ PauseContainerVersion }} CACHE_CONTAINER_IMAGES={{ CacheContainerImages }} SSM_AGENT_VERSION={{ SSMAgentVersion }} WORKING_DIR={{ TempPath }}/{{ WorkerDir}} AWS_ACCESS_KEY_ID= bash {{ HomePath }}/{{ GithubDir }}/templates/al2/provisioners/install-worker.sh
      - name: Cleanup
        action: ExecuteBash
        timeoutSeconds: 1200
        onFailure: Abort
        maxAttempts: 1
        inputs:
          commands:
            - if [ "{{ AdditionalRepos }}" != "none" ]; then ADDITIONAL_YUM_REPOS='{{ AdditionalRepos }}' bash {{ HomePath }}/{{ GithubDir }}/templates/al2/provisioners/cleanup-additional-repos.sh; fi
            - bash {{ HomePath }}/{{ GithubDir }}/templates/shared/provisioners/cleanup.sh
            - KERNEL_VERSION=$(echo $KERNEL_VERSION | sed 's/version-//')
            - KERNEL_VERSION=$KERNEL_VERSION bash {{ HomePath }}/{{ GithubDir }}/templates/al2/provisioners/validate.sh
            - sudo rm -rf {{ HomePath }}/*
            - sudo rm -rf {{ TempPath }}/provisioners
            - sudo rm -rf {{ TempPath }}/hack
            - sudo rm -rf {{ TempPath }}/{{ WorkerDir}}